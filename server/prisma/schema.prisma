// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider                        = "node node_modules/prisma-nestjs-graphql"
  // for yarn monorepos
  // provider = "prisma-nestjs-graphql"
  output                          = "../src/@generated"
  graphqlScalars_BigInt_name      = "GraphQLBigInt"
  graphqlScalars_BigInt_specifier = "graphql-scalars"
  fields_Validator_from           = "class-validator"
  fields_Validator_input          = true
  noTypeId                        = true
  decorate_1_type                 = "Create@(One|Many)*Args"
  decorate_1_field                = data
  decorate_1_name                 = ValidateNested
  decorate_1_from                 = "class-validator"
  decorate_1_arguments            = "[]"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserSessionState {
  ONLINE
  OFFLINE
}

/// 用户表
model User {
  /// @HideField({ match: 'UserWhereInput' })
  id            BigInt           @id @default(autoincrement())
  /// 用户名
  /// @Validator.MinLength(3)
  /// @HideField({ match: 'UserWhereInput' })
  username      String           @unique @db.VarChar(32)
  /// 昵称
  /// @Validator.MinLength(1)
  nickname      String           @db.VarChar(32)
  /// 昵称编号
  nicknameNo    Int
  /// 在线状态
  /// @HideField({ input: true, output: false })
  sessionState  UserSessionState @default(OFFLINE)
  /// 密码
  /// @Validator.MinLength(6)
  /// @HideField({ match: 'UserWhereInput' })
  password      String
  /// 密码盐
  /// @HideField({ input: true, output: false })
  passwordSalt  String
  /// @HideField({ input: true, output: false })
  createdTime   DateTime         @default(now())
  /// @HideField({ input: true, output: false })
  updatedTime   DateTime         @updatedAt
  /// @HideField({ input: true, output: true })
  deletedTime   DateTime?
  /// 拥有的频道
  /// @HideField({ input: true, output: false })
  ownedChannels Channel[]        @relation("UserOwnedChannels")
  /// 加入的频道
  /// @HideField({ input: true, output: false })
  channels      Channel[]
}

/// 用户昵称表
model UserNickname {
  id          BigInt    @id @default(autoincrement())
  /// 昵称
  nickname    String    @unique @db.VarChar(32)
  /// 昵称编号
  no          Int
  createdTime DateTime  @default(now())
  updatedTime DateTime  @updatedAt
  /// @HideField({ input: true, output: true })
  deletedTime DateTime?
}

model Channel {
  id          BigInt    @id @default(autoincrement())
  /// 频道代号
  code        String    @unique @default(cuid()) @db.VarChar(32)
  /// 频道名
  name        String    @db.VarChar(32)
  /// 拥有者
  ownerUser   User      @relation("UserOwnedChannels", fields: [ownerUserId], references: [id])
  /// 拥有者ID
  ownerUserId BigInt
  /// 频道用户
  users       User[]
  /// 房间
  rooms       Room[]
  createdTime DateTime  @default(now())
  updatedTime DateTime  @updatedAt
  /// @HideField({ input: true, output: true })
  deletedTime DateTime?
}

model Room {
  id          BigInt    @id @default(autoincrement())
  channelId   BigInt
  channel     Channel   @relation(fields: [channelId], references: [id])
  name        String
  maxMember   Int       @default(50)
  createdTime DateTime  @default(now())
  updatedTime DateTime  @updatedAt
  /// @HideField({ input: true, output: true })
  deletedTime DateTime?
}
