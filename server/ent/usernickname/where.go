// Code generated by ent, DO NOT EDIT.

package usernickname

import (
	"server/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "createTime" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "updateTime" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldEQ(FieldUpdateTime, v))
}

// DeleteTime applies equality check predicate on the "delete_time" field. It's identical to DeleteTimeEQ.
func DeleteTime(v time.Time) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldEQ(FieldDeleteTime, v))
}

// Nickname applies equality check predicate on the "nickname" field. It's identical to NicknameEQ.
func Nickname(v string) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldEQ(FieldNickname, v))
}

// No applies equality check predicate on the "no" field. It's identical to NoEQ.
func No(v int) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldEQ(FieldNo, v))
}

// CreateTimeEQ applies the EQ predicate on the "createTime" field.
func CreateTimeEQ(v time.Time) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "createTime" field.
func CreateTimeNEQ(v time.Time) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "createTime" field.
func CreateTimeIn(vs ...time.Time) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "createTime" field.
func CreateTimeNotIn(vs ...time.Time) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "createTime" field.
func CreateTimeGT(v time.Time) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "createTime" field.
func CreateTimeGTE(v time.Time) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "createTime" field.
func CreateTimeLT(v time.Time) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "createTime" field.
func CreateTimeLTE(v time.Time) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "updateTime" field.
func UpdateTimeEQ(v time.Time) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "updateTime" field.
func UpdateTimeNEQ(v time.Time) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "updateTime" field.
func UpdateTimeIn(vs ...time.Time) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "updateTime" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "updateTime" field.
func UpdateTimeGT(v time.Time) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "updateTime" field.
func UpdateTimeGTE(v time.Time) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "updateTime" field.
func UpdateTimeLT(v time.Time) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "updateTime" field.
func UpdateTimeLTE(v time.Time) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldLTE(FieldUpdateTime, v))
}

// DeleteTimeEQ applies the EQ predicate on the "delete_time" field.
func DeleteTimeEQ(v time.Time) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldEQ(FieldDeleteTime, v))
}

// DeleteTimeNEQ applies the NEQ predicate on the "delete_time" field.
func DeleteTimeNEQ(v time.Time) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldNEQ(FieldDeleteTime, v))
}

// DeleteTimeIn applies the In predicate on the "delete_time" field.
func DeleteTimeIn(vs ...time.Time) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldIn(FieldDeleteTime, vs...))
}

// DeleteTimeNotIn applies the NotIn predicate on the "delete_time" field.
func DeleteTimeNotIn(vs ...time.Time) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldNotIn(FieldDeleteTime, vs...))
}

// DeleteTimeGT applies the GT predicate on the "delete_time" field.
func DeleteTimeGT(v time.Time) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldGT(FieldDeleteTime, v))
}

// DeleteTimeGTE applies the GTE predicate on the "delete_time" field.
func DeleteTimeGTE(v time.Time) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldGTE(FieldDeleteTime, v))
}

// DeleteTimeLT applies the LT predicate on the "delete_time" field.
func DeleteTimeLT(v time.Time) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldLT(FieldDeleteTime, v))
}

// DeleteTimeLTE applies the LTE predicate on the "delete_time" field.
func DeleteTimeLTE(v time.Time) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldLTE(FieldDeleteTime, v))
}

// DeleteTimeIsNil applies the IsNil predicate on the "delete_time" field.
func DeleteTimeIsNil() predicate.UserNickname {
	return predicate.UserNickname(sql.FieldIsNull(FieldDeleteTime))
}

// DeleteTimeNotNil applies the NotNil predicate on the "delete_time" field.
func DeleteTimeNotNil() predicate.UserNickname {
	return predicate.UserNickname(sql.FieldNotNull(FieldDeleteTime))
}

// NicknameEQ applies the EQ predicate on the "nickname" field.
func NicknameEQ(v string) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldEQ(FieldNickname, v))
}

// NicknameNEQ applies the NEQ predicate on the "nickname" field.
func NicknameNEQ(v string) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldNEQ(FieldNickname, v))
}

// NicknameIn applies the In predicate on the "nickname" field.
func NicknameIn(vs ...string) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldIn(FieldNickname, vs...))
}

// NicknameNotIn applies the NotIn predicate on the "nickname" field.
func NicknameNotIn(vs ...string) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldNotIn(FieldNickname, vs...))
}

// NicknameGT applies the GT predicate on the "nickname" field.
func NicknameGT(v string) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldGT(FieldNickname, v))
}

// NicknameGTE applies the GTE predicate on the "nickname" field.
func NicknameGTE(v string) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldGTE(FieldNickname, v))
}

// NicknameLT applies the LT predicate on the "nickname" field.
func NicknameLT(v string) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldLT(FieldNickname, v))
}

// NicknameLTE applies the LTE predicate on the "nickname" field.
func NicknameLTE(v string) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldLTE(FieldNickname, v))
}

// NicknameContains applies the Contains predicate on the "nickname" field.
func NicknameContains(v string) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldContains(FieldNickname, v))
}

// NicknameHasPrefix applies the HasPrefix predicate on the "nickname" field.
func NicknameHasPrefix(v string) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldHasPrefix(FieldNickname, v))
}

// NicknameHasSuffix applies the HasSuffix predicate on the "nickname" field.
func NicknameHasSuffix(v string) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldHasSuffix(FieldNickname, v))
}

// NicknameEqualFold applies the EqualFold predicate on the "nickname" field.
func NicknameEqualFold(v string) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldEqualFold(FieldNickname, v))
}

// NicknameContainsFold applies the ContainsFold predicate on the "nickname" field.
func NicknameContainsFold(v string) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldContainsFold(FieldNickname, v))
}

// NoEQ applies the EQ predicate on the "no" field.
func NoEQ(v int) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldEQ(FieldNo, v))
}

// NoNEQ applies the NEQ predicate on the "no" field.
func NoNEQ(v int) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldNEQ(FieldNo, v))
}

// NoIn applies the In predicate on the "no" field.
func NoIn(vs ...int) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldIn(FieldNo, vs...))
}

// NoNotIn applies the NotIn predicate on the "no" field.
func NoNotIn(vs ...int) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldNotIn(FieldNo, vs...))
}

// NoGT applies the GT predicate on the "no" field.
func NoGT(v int) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldGT(FieldNo, v))
}

// NoGTE applies the GTE predicate on the "no" field.
func NoGTE(v int) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldGTE(FieldNo, v))
}

// NoLT applies the LT predicate on the "no" field.
func NoLT(v int) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldLT(FieldNo, v))
}

// NoLTE applies the LTE predicate on the "no" field.
func NoLTE(v int) predicate.UserNickname {
	return predicate.UserNickname(sql.FieldLTE(FieldNo, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserNickname) predicate.UserNickname {
	return predicate.UserNickname(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserNickname) predicate.UserNickname {
	return predicate.UserNickname(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserNickname) predicate.UserNickname {
	return predicate.UserNickname(func(s *sql.Selector) {
		p(s.Not())
	})
}
