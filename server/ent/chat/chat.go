// Code generated by ent, DO NOT EDIT.

package chat

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the chat type in the database.
	Label = "chat"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldDeleteTime holds the string denoting the delete_time field in the database.
	FieldDeleteTime = "delete_time"
	// FieldBusinessType holds the string denoting the business_type field in the database.
	FieldBusinessType = "business_type"
	// FieldBusinessID holds the string denoting the business_id field in the database.
	FieldBusinessID = "business_id"
	// FieldFromUserID holds the string denoting the from_user_id field in the database.
	FieldFromUserID = "from_user_id"
	// FieldSourceType holds the string denoting the source_type field in the database.
	FieldSourceType = "source_type"
	// FieldContentType holds the string denoting the content_type field in the database.
	FieldContentType = "content_type"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// Table holds the table name of the chat in the database.
	Table = "chats"
)

// Columns holds all SQL columns for chat fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldDeleteTime,
	FieldBusinessType,
	FieldBusinessID,
	FieldFromUserID,
	FieldSourceType,
	FieldContentType,
	FieldContent,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "server/ent/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// BusinessIDValidator is a validator for the "business_id" field. It is called by the builders before save.
	BusinessIDValidator func(string) error
	// FromUserIDValidator is a validator for the "from_user_id" field. It is called by the builders before save.
	FromUserIDValidator func(string) error
)

// BusinessType defines the type for the "business_type" enum field.
type BusinessType string

// BusinessType values.
const (
	BusinessTypeRoom BusinessType = "room"
	BusinessTypeUser BusinessType = "user"
)

func (bt BusinessType) String() string {
	return string(bt)
}

// BusinessTypeValidator is a validator for the "business_type" field enum values. It is called by the builders before save.
func BusinessTypeValidator(bt BusinessType) error {
	switch bt {
	case BusinessTypeRoom, BusinessTypeUser:
		return nil
	default:
		return fmt.Errorf("chat: invalid enum value for business_type field: %q", bt)
	}
}

// SourceType defines the type for the "source_type" enum field.
type SourceType string

// SourceType values.
const (
	SourceTypeSystem SourceType = "system"
	SourceTypeAdmin  SourceType = "admin"
	SourceTypeUser   SourceType = "user"
)

func (st SourceType) String() string {
	return string(st)
}

// SourceTypeValidator is a validator for the "source_type" field enum values. It is called by the builders before save.
func SourceTypeValidator(st SourceType) error {
	switch st {
	case SourceTypeSystem, SourceTypeAdmin, SourceTypeUser:
		return nil
	default:
		return fmt.Errorf("chat: invalid enum value for source_type field: %q", st)
	}
}

// ContentType defines the type for the "content_type" enum field.
type ContentType string

// ContentType values.
const (
	ContentTypeText  ContentType = "text"
	ContentTypeImage ContentType = "image"
)

func (ct ContentType) String() string {
	return string(ct)
}

// ContentTypeValidator is a validator for the "content_type" field enum values. It is called by the builders before save.
func ContentTypeValidator(ct ContentType) error {
	switch ct {
	case ContentTypeText, ContentTypeImage:
		return nil
	default:
		return fmt.Errorf("chat: invalid enum value for content_type field: %q", ct)
	}
}

// OrderOption defines the ordering options for the Chat queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByDeleteTime orders the results by the delete_time field.
func ByDeleteTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleteTime, opts...).ToFunc()
}

// ByBusinessType orders the results by the business_type field.
func ByBusinessType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBusinessType, opts...).ToFunc()
}

// ByBusinessID orders the results by the business_id field.
func ByBusinessID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBusinessID, opts...).ToFunc()
}

// ByFromUserID orders the results by the from_user_id field.
func ByFromUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFromUserID, opts...).ToFunc()
}

// BySourceType orders the results by the source_type field.
func BySourceType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceType, opts...).ToFunc()
}

// ByContentType orders the results by the content_type field.
func ByContentType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContentType, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}
