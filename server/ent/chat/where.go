// Code generated by ent, DO NOT EDIT.

package chat

import (
	"server/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Chat {
	return predicate.Chat(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Chat {
	return predicate.Chat(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Chat {
	return predicate.Chat(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Chat {
	return predicate.Chat(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Chat {
	return predicate.Chat(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Chat {
	return predicate.Chat(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Chat {
	return predicate.Chat(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Chat {
	return predicate.Chat(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Chat {
	return predicate.Chat(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "createTime" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "updateTime" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldEQ(FieldUpdateTime, v))
}

// DeleteTime applies equality check predicate on the "delete_time" field. It's identical to DeleteTimeEQ.
func DeleteTime(v time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldEQ(FieldDeleteTime, v))
}

// BusinessID applies equality check predicate on the "business_id" field. It's identical to BusinessIDEQ.
func BusinessID(v string) predicate.Chat {
	return predicate.Chat(sql.FieldEQ(FieldBusinessID, v))
}

// FromUserId applies equality check predicate on the "fromUserId" field. It's identical to FromUserIdEQ.
func FromUserId(v string) predicate.Chat {
	return predicate.Chat(sql.FieldEQ(FieldFromUserId, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.Chat {
	return predicate.Chat(sql.FieldEQ(FieldContent, v))
}

// CreateTimeEQ applies the EQ predicate on the "createTime" field.
func CreateTimeEQ(v time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "createTime" field.
func CreateTimeNEQ(v time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "createTime" field.
func CreateTimeIn(vs ...time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "createTime" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "createTime" field.
func CreateTimeGT(v time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "createTime" field.
func CreateTimeGTE(v time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "createTime" field.
func CreateTimeLT(v time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "createTime" field.
func CreateTimeLTE(v time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "updateTime" field.
func UpdateTimeEQ(v time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "updateTime" field.
func UpdateTimeNEQ(v time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "updateTime" field.
func UpdateTimeIn(vs ...time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "updateTime" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "updateTime" field.
func UpdateTimeGT(v time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "updateTime" field.
func UpdateTimeGTE(v time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "updateTime" field.
func UpdateTimeLT(v time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "updateTime" field.
func UpdateTimeLTE(v time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldLTE(FieldUpdateTime, v))
}

// DeleteTimeEQ applies the EQ predicate on the "delete_time" field.
func DeleteTimeEQ(v time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldEQ(FieldDeleteTime, v))
}

// DeleteTimeNEQ applies the NEQ predicate on the "delete_time" field.
func DeleteTimeNEQ(v time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldNEQ(FieldDeleteTime, v))
}

// DeleteTimeIn applies the In predicate on the "delete_time" field.
func DeleteTimeIn(vs ...time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldIn(FieldDeleteTime, vs...))
}

// DeleteTimeNotIn applies the NotIn predicate on the "delete_time" field.
func DeleteTimeNotIn(vs ...time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldNotIn(FieldDeleteTime, vs...))
}

// DeleteTimeGT applies the GT predicate on the "delete_time" field.
func DeleteTimeGT(v time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldGT(FieldDeleteTime, v))
}

// DeleteTimeGTE applies the GTE predicate on the "delete_time" field.
func DeleteTimeGTE(v time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldGTE(FieldDeleteTime, v))
}

// DeleteTimeLT applies the LT predicate on the "delete_time" field.
func DeleteTimeLT(v time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldLT(FieldDeleteTime, v))
}

// DeleteTimeLTE applies the LTE predicate on the "delete_time" field.
func DeleteTimeLTE(v time.Time) predicate.Chat {
	return predicate.Chat(sql.FieldLTE(FieldDeleteTime, v))
}

// DeleteTimeIsNil applies the IsNil predicate on the "delete_time" field.
func DeleteTimeIsNil() predicate.Chat {
	return predicate.Chat(sql.FieldIsNull(FieldDeleteTime))
}

// DeleteTimeNotNil applies the NotNil predicate on the "delete_time" field.
func DeleteTimeNotNil() predicate.Chat {
	return predicate.Chat(sql.FieldNotNull(FieldDeleteTime))
}

// BusinessTypeEQ applies the EQ predicate on the "businessType" field.
func BusinessTypeEQ(v BusinessType) predicate.Chat {
	return predicate.Chat(sql.FieldEQ(FieldBusinessType, v))
}

// BusinessTypeNEQ applies the NEQ predicate on the "businessType" field.
func BusinessTypeNEQ(v BusinessType) predicate.Chat {
	return predicate.Chat(sql.FieldNEQ(FieldBusinessType, v))
}

// BusinessTypeIn applies the In predicate on the "businessType" field.
func BusinessTypeIn(vs ...BusinessType) predicate.Chat {
	return predicate.Chat(sql.FieldIn(FieldBusinessType, vs...))
}

// BusinessTypeNotIn applies the NotIn predicate on the "businessType" field.
func BusinessTypeNotIn(vs ...BusinessType) predicate.Chat {
	return predicate.Chat(sql.FieldNotIn(FieldBusinessType, vs...))
}

// BusinessIDEQ applies the EQ predicate on the "business_id" field.
func BusinessIDEQ(v string) predicate.Chat {
	return predicate.Chat(sql.FieldEQ(FieldBusinessID, v))
}

// BusinessIDNEQ applies the NEQ predicate on the "business_id" field.
func BusinessIDNEQ(v string) predicate.Chat {
	return predicate.Chat(sql.FieldNEQ(FieldBusinessID, v))
}

// BusinessIDIn applies the In predicate on the "business_id" field.
func BusinessIDIn(vs ...string) predicate.Chat {
	return predicate.Chat(sql.FieldIn(FieldBusinessID, vs...))
}

// BusinessIDNotIn applies the NotIn predicate on the "business_id" field.
func BusinessIDNotIn(vs ...string) predicate.Chat {
	return predicate.Chat(sql.FieldNotIn(FieldBusinessID, vs...))
}

// BusinessIDGT applies the GT predicate on the "business_id" field.
func BusinessIDGT(v string) predicate.Chat {
	return predicate.Chat(sql.FieldGT(FieldBusinessID, v))
}

// BusinessIDGTE applies the GTE predicate on the "business_id" field.
func BusinessIDGTE(v string) predicate.Chat {
	return predicate.Chat(sql.FieldGTE(FieldBusinessID, v))
}

// BusinessIDLT applies the LT predicate on the "business_id" field.
func BusinessIDLT(v string) predicate.Chat {
	return predicate.Chat(sql.FieldLT(FieldBusinessID, v))
}

// BusinessIDLTE applies the LTE predicate on the "business_id" field.
func BusinessIDLTE(v string) predicate.Chat {
	return predicate.Chat(sql.FieldLTE(FieldBusinessID, v))
}

// BusinessIDContains applies the Contains predicate on the "business_id" field.
func BusinessIDContains(v string) predicate.Chat {
	return predicate.Chat(sql.FieldContains(FieldBusinessID, v))
}

// BusinessIDHasPrefix applies the HasPrefix predicate on the "business_id" field.
func BusinessIDHasPrefix(v string) predicate.Chat {
	return predicate.Chat(sql.FieldHasPrefix(FieldBusinessID, v))
}

// BusinessIDHasSuffix applies the HasSuffix predicate on the "business_id" field.
func BusinessIDHasSuffix(v string) predicate.Chat {
	return predicate.Chat(sql.FieldHasSuffix(FieldBusinessID, v))
}

// BusinessIDEqualFold applies the EqualFold predicate on the "business_id" field.
func BusinessIDEqualFold(v string) predicate.Chat {
	return predicate.Chat(sql.FieldEqualFold(FieldBusinessID, v))
}

// BusinessIDContainsFold applies the ContainsFold predicate on the "business_id" field.
func BusinessIDContainsFold(v string) predicate.Chat {
	return predicate.Chat(sql.FieldContainsFold(FieldBusinessID, v))
}

// FromUserIdEQ applies the EQ predicate on the "fromUserId" field.
func FromUserIdEQ(v string) predicate.Chat {
	return predicate.Chat(sql.FieldEQ(FieldFromUserId, v))
}

// FromUserIdNEQ applies the NEQ predicate on the "fromUserId" field.
func FromUserIdNEQ(v string) predicate.Chat {
	return predicate.Chat(sql.FieldNEQ(FieldFromUserId, v))
}

// FromUserIdIn applies the In predicate on the "fromUserId" field.
func FromUserIdIn(vs ...string) predicate.Chat {
	return predicate.Chat(sql.FieldIn(FieldFromUserId, vs...))
}

// FromUserIdNotIn applies the NotIn predicate on the "fromUserId" field.
func FromUserIdNotIn(vs ...string) predicate.Chat {
	return predicate.Chat(sql.FieldNotIn(FieldFromUserId, vs...))
}

// FromUserIdGT applies the GT predicate on the "fromUserId" field.
func FromUserIdGT(v string) predicate.Chat {
	return predicate.Chat(sql.FieldGT(FieldFromUserId, v))
}

// FromUserIdGTE applies the GTE predicate on the "fromUserId" field.
func FromUserIdGTE(v string) predicate.Chat {
	return predicate.Chat(sql.FieldGTE(FieldFromUserId, v))
}

// FromUserIdLT applies the LT predicate on the "fromUserId" field.
func FromUserIdLT(v string) predicate.Chat {
	return predicate.Chat(sql.FieldLT(FieldFromUserId, v))
}

// FromUserIdLTE applies the LTE predicate on the "fromUserId" field.
func FromUserIdLTE(v string) predicate.Chat {
	return predicate.Chat(sql.FieldLTE(FieldFromUserId, v))
}

// FromUserIdContains applies the Contains predicate on the "fromUserId" field.
func FromUserIdContains(v string) predicate.Chat {
	return predicate.Chat(sql.FieldContains(FieldFromUserId, v))
}

// FromUserIdHasPrefix applies the HasPrefix predicate on the "fromUserId" field.
func FromUserIdHasPrefix(v string) predicate.Chat {
	return predicate.Chat(sql.FieldHasPrefix(FieldFromUserId, v))
}

// FromUserIdHasSuffix applies the HasSuffix predicate on the "fromUserId" field.
func FromUserIdHasSuffix(v string) predicate.Chat {
	return predicate.Chat(sql.FieldHasSuffix(FieldFromUserId, v))
}

// FromUserIdEqualFold applies the EqualFold predicate on the "fromUserId" field.
func FromUserIdEqualFold(v string) predicate.Chat {
	return predicate.Chat(sql.FieldEqualFold(FieldFromUserId, v))
}

// FromUserIdContainsFold applies the ContainsFold predicate on the "fromUserId" field.
func FromUserIdContainsFold(v string) predicate.Chat {
	return predicate.Chat(sql.FieldContainsFold(FieldFromUserId, v))
}

// SourceTypeEQ applies the EQ predicate on the "sourceType" field.
func SourceTypeEQ(v SourceType) predicate.Chat {
	return predicate.Chat(sql.FieldEQ(FieldSourceType, v))
}

// SourceTypeNEQ applies the NEQ predicate on the "sourceType" field.
func SourceTypeNEQ(v SourceType) predicate.Chat {
	return predicate.Chat(sql.FieldNEQ(FieldSourceType, v))
}

// SourceTypeIn applies the In predicate on the "sourceType" field.
func SourceTypeIn(vs ...SourceType) predicate.Chat {
	return predicate.Chat(sql.FieldIn(FieldSourceType, vs...))
}

// SourceTypeNotIn applies the NotIn predicate on the "sourceType" field.
func SourceTypeNotIn(vs ...SourceType) predicate.Chat {
	return predicate.Chat(sql.FieldNotIn(FieldSourceType, vs...))
}

// ContentTypeEQ applies the EQ predicate on the "contentType" field.
func ContentTypeEQ(v ContentType) predicate.Chat {
	return predicate.Chat(sql.FieldEQ(FieldContentType, v))
}

// ContentTypeNEQ applies the NEQ predicate on the "contentType" field.
func ContentTypeNEQ(v ContentType) predicate.Chat {
	return predicate.Chat(sql.FieldNEQ(FieldContentType, v))
}

// ContentTypeIn applies the In predicate on the "contentType" field.
func ContentTypeIn(vs ...ContentType) predicate.Chat {
	return predicate.Chat(sql.FieldIn(FieldContentType, vs...))
}

// ContentTypeNotIn applies the NotIn predicate on the "contentType" field.
func ContentTypeNotIn(vs ...ContentType) predicate.Chat {
	return predicate.Chat(sql.FieldNotIn(FieldContentType, vs...))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.Chat {
	return predicate.Chat(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.Chat {
	return predicate.Chat(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.Chat {
	return predicate.Chat(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.Chat {
	return predicate.Chat(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.Chat {
	return predicate.Chat(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.Chat {
	return predicate.Chat(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.Chat {
	return predicate.Chat(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.Chat {
	return predicate.Chat(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.Chat {
	return predicate.Chat(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.Chat {
	return predicate.Chat(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.Chat {
	return predicate.Chat(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.Chat {
	return predicate.Chat(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.Chat {
	return predicate.Chat(sql.FieldContainsFold(FieldContent, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Chat) predicate.Chat {
	return predicate.Chat(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Chat) predicate.Chat {
	return predicate.Chat(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Chat) predicate.Chat {
	return predicate.Chat(func(s *sql.Selector) {
		p(s.Not())
	})
}
