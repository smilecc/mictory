// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server/ent/usernickname"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserNicknameCreate is the builder for creating a UserNickname entity.
type UserNicknameCreate struct {
	config
	mutation *UserNicknameMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (unc *UserNicknameCreate) SetCreateTime(t time.Time) *UserNicknameCreate {
	unc.mutation.SetCreateTime(t)
	return unc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (unc *UserNicknameCreate) SetNillableCreateTime(t *time.Time) *UserNicknameCreate {
	if t != nil {
		unc.SetCreateTime(*t)
	}
	return unc
}

// SetUpdateTime sets the "update_time" field.
func (unc *UserNicknameCreate) SetUpdateTime(t time.Time) *UserNicknameCreate {
	unc.mutation.SetUpdateTime(t)
	return unc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (unc *UserNicknameCreate) SetNillableUpdateTime(t *time.Time) *UserNicknameCreate {
	if t != nil {
		unc.SetUpdateTime(*t)
	}
	return unc
}

// SetDeleteTime sets the "delete_time" field.
func (unc *UserNicknameCreate) SetDeleteTime(t time.Time) *UserNicknameCreate {
	unc.mutation.SetDeleteTime(t)
	return unc
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (unc *UserNicknameCreate) SetNillableDeleteTime(t *time.Time) *UserNicknameCreate {
	if t != nil {
		unc.SetDeleteTime(*t)
	}
	return unc
}

// SetNickname sets the "nickname" field.
func (unc *UserNicknameCreate) SetNickname(s string) *UserNicknameCreate {
	unc.mutation.SetNickname(s)
	return unc
}

// SetNo sets the "no" field.
func (unc *UserNicknameCreate) SetNo(i int) *UserNicknameCreate {
	unc.mutation.SetNo(i)
	return unc
}

// SetID sets the "id" field.
func (unc *UserNicknameCreate) SetID(i int64) *UserNicknameCreate {
	unc.mutation.SetID(i)
	return unc
}

// Mutation returns the UserNicknameMutation object of the builder.
func (unc *UserNicknameCreate) Mutation() *UserNicknameMutation {
	return unc.mutation
}

// Save creates the UserNickname in the database.
func (unc *UserNicknameCreate) Save(ctx context.Context) (*UserNickname, error) {
	if err := unc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, unc.sqlSave, unc.mutation, unc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (unc *UserNicknameCreate) SaveX(ctx context.Context) *UserNickname {
	v, err := unc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (unc *UserNicknameCreate) Exec(ctx context.Context) error {
	_, err := unc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (unc *UserNicknameCreate) ExecX(ctx context.Context) {
	if err := unc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (unc *UserNicknameCreate) defaults() error {
	if _, ok := unc.mutation.CreateTime(); !ok {
		if usernickname.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized usernickname.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := usernickname.DefaultCreateTime()
		unc.mutation.SetCreateTime(v)
	}
	if _, ok := unc.mutation.UpdateTime(); !ok {
		if usernickname.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized usernickname.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := usernickname.DefaultUpdateTime()
		unc.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (unc *UserNicknameCreate) check() error {
	if _, ok := unc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "UserNickname.create_time"`)}
	}
	if _, ok := unc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "UserNickname.update_time"`)}
	}
	if _, ok := unc.mutation.Nickname(); !ok {
		return &ValidationError{Name: "nickname", err: errors.New(`ent: missing required field "UserNickname.nickname"`)}
	}
	if v, ok := unc.mutation.Nickname(); ok {
		if err := usernickname.NicknameValidator(v); err != nil {
			return &ValidationError{Name: "nickname", err: fmt.Errorf(`ent: validator failed for field "UserNickname.nickname": %w`, err)}
		}
	}
	if _, ok := unc.mutation.No(); !ok {
		return &ValidationError{Name: "no", err: errors.New(`ent: missing required field "UserNickname.no"`)}
	}
	return nil
}

func (unc *UserNicknameCreate) sqlSave(ctx context.Context) (*UserNickname, error) {
	if err := unc.check(); err != nil {
		return nil, err
	}
	_node, _spec := unc.createSpec()
	if err := sqlgraph.CreateNode(ctx, unc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	unc.mutation.id = &_node.ID
	unc.mutation.done = true
	return _node, nil
}

func (unc *UserNicknameCreate) createSpec() (*UserNickname, *sqlgraph.CreateSpec) {
	var (
		_node = &UserNickname{config: unc.config}
		_spec = sqlgraph.NewCreateSpec(usernickname.Table, sqlgraph.NewFieldSpec(usernickname.FieldID, field.TypeInt64))
	)
	if id, ok := unc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := unc.mutation.CreateTime(); ok {
		_spec.SetField(usernickname.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := unc.mutation.UpdateTime(); ok {
		_spec.SetField(usernickname.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := unc.mutation.DeleteTime(); ok {
		_spec.SetField(usernickname.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = value
	}
	if value, ok := unc.mutation.Nickname(); ok {
		_spec.SetField(usernickname.FieldNickname, field.TypeString, value)
		_node.Nickname = value
	}
	if value, ok := unc.mutation.No(); ok {
		_spec.SetField(usernickname.FieldNo, field.TypeInt, value)
		_node.No = value
	}
	return _node, _spec
}

// UserNicknameCreateBulk is the builder for creating many UserNickname entities in bulk.
type UserNicknameCreateBulk struct {
	config
	builders []*UserNicknameCreate
}

// Save creates the UserNickname entities in the database.
func (uncb *UserNicknameCreateBulk) Save(ctx context.Context) ([]*UserNickname, error) {
	specs := make([]*sqlgraph.CreateSpec, len(uncb.builders))
	nodes := make([]*UserNickname, len(uncb.builders))
	mutators := make([]Mutator, len(uncb.builders))
	for i := range uncb.builders {
		func(i int, root context.Context) {
			builder := uncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserNicknameMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uncb *UserNicknameCreateBulk) SaveX(ctx context.Context) []*UserNickname {
	v, err := uncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uncb *UserNicknameCreateBulk) Exec(ctx context.Context) error {
	_, err := uncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uncb *UserNicknameCreateBulk) ExecX(ctx context.Context) {
	if err := uncb.Exec(ctx); err != nil {
		panic(err)
	}
}
