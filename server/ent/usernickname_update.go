// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server/ent/predicate"
	"server/ent/usernickname"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserNicknameUpdate is the builder for updating UserNickname entities.
type UserNicknameUpdate struct {
	config
	hooks    []Hook
	mutation *UserNicknameMutation
}

// Where appends a list predicates to the UserNicknameUpdate builder.
func (unu *UserNicknameUpdate) Where(ps ...predicate.UserNickname) *UserNicknameUpdate {
	unu.mutation.Where(ps...)
	return unu
}

// SetUpdateTime sets the "update_time" field.
func (unu *UserNicknameUpdate) SetUpdateTime(t time.Time) *UserNicknameUpdate {
	unu.mutation.SetUpdateTime(t)
	return unu
}

// SetDeleteTime sets the "delete_time" field.
func (unu *UserNicknameUpdate) SetDeleteTime(t time.Time) *UserNicknameUpdate {
	unu.mutation.SetDeleteTime(t)
	return unu
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (unu *UserNicknameUpdate) SetNillableDeleteTime(t *time.Time) *UserNicknameUpdate {
	if t != nil {
		unu.SetDeleteTime(*t)
	}
	return unu
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (unu *UserNicknameUpdate) ClearDeleteTime() *UserNicknameUpdate {
	unu.mutation.ClearDeleteTime()
	return unu
}

// SetNickname sets the "nickname" field.
func (unu *UserNicknameUpdate) SetNickname(s string) *UserNicknameUpdate {
	unu.mutation.SetNickname(s)
	return unu
}

// SetNo sets the "no" field.
func (unu *UserNicknameUpdate) SetNo(i int) *UserNicknameUpdate {
	unu.mutation.ResetNo()
	unu.mutation.SetNo(i)
	return unu
}

// AddNo adds i to the "no" field.
func (unu *UserNicknameUpdate) AddNo(i int) *UserNicknameUpdate {
	unu.mutation.AddNo(i)
	return unu
}

// Mutation returns the UserNicknameMutation object of the builder.
func (unu *UserNicknameUpdate) Mutation() *UserNicknameMutation {
	return unu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (unu *UserNicknameUpdate) Save(ctx context.Context) (int, error) {
	if err := unu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, unu.sqlSave, unu.mutation, unu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (unu *UserNicknameUpdate) SaveX(ctx context.Context) int {
	affected, err := unu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (unu *UserNicknameUpdate) Exec(ctx context.Context) error {
	_, err := unu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (unu *UserNicknameUpdate) ExecX(ctx context.Context) {
	if err := unu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (unu *UserNicknameUpdate) defaults() error {
	if _, ok := unu.mutation.UpdateTime(); !ok {
		if usernickname.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized usernickname.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := usernickname.UpdateDefaultUpdateTime()
		unu.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (unu *UserNicknameUpdate) check() error {
	if v, ok := unu.mutation.Nickname(); ok {
		if err := usernickname.NicknameValidator(v); err != nil {
			return &ValidationError{Name: "nickname", err: fmt.Errorf(`ent: validator failed for field "UserNickname.nickname": %w`, err)}
		}
	}
	return nil
}

func (unu *UserNicknameUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := unu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(usernickname.Table, usernickname.Columns, sqlgraph.NewFieldSpec(usernickname.FieldID, field.TypeInt64))
	if ps := unu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := unu.mutation.UpdateTime(); ok {
		_spec.SetField(usernickname.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := unu.mutation.DeleteTime(); ok {
		_spec.SetField(usernickname.FieldDeleteTime, field.TypeTime, value)
	}
	if unu.mutation.DeleteTimeCleared() {
		_spec.ClearField(usernickname.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := unu.mutation.Nickname(); ok {
		_spec.SetField(usernickname.FieldNickname, field.TypeString, value)
	}
	if value, ok := unu.mutation.No(); ok {
		_spec.SetField(usernickname.FieldNo, field.TypeInt, value)
	}
	if value, ok := unu.mutation.AddedNo(); ok {
		_spec.AddField(usernickname.FieldNo, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, unu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usernickname.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	unu.mutation.done = true
	return n, nil
}

// UserNicknameUpdateOne is the builder for updating a single UserNickname entity.
type UserNicknameUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserNicknameMutation
}

// SetUpdateTime sets the "update_time" field.
func (unuo *UserNicknameUpdateOne) SetUpdateTime(t time.Time) *UserNicknameUpdateOne {
	unuo.mutation.SetUpdateTime(t)
	return unuo
}

// SetDeleteTime sets the "delete_time" field.
func (unuo *UserNicknameUpdateOne) SetDeleteTime(t time.Time) *UserNicknameUpdateOne {
	unuo.mutation.SetDeleteTime(t)
	return unuo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (unuo *UserNicknameUpdateOne) SetNillableDeleteTime(t *time.Time) *UserNicknameUpdateOne {
	if t != nil {
		unuo.SetDeleteTime(*t)
	}
	return unuo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (unuo *UserNicknameUpdateOne) ClearDeleteTime() *UserNicknameUpdateOne {
	unuo.mutation.ClearDeleteTime()
	return unuo
}

// SetNickname sets the "nickname" field.
func (unuo *UserNicknameUpdateOne) SetNickname(s string) *UserNicknameUpdateOne {
	unuo.mutation.SetNickname(s)
	return unuo
}

// SetNo sets the "no" field.
func (unuo *UserNicknameUpdateOne) SetNo(i int) *UserNicknameUpdateOne {
	unuo.mutation.ResetNo()
	unuo.mutation.SetNo(i)
	return unuo
}

// AddNo adds i to the "no" field.
func (unuo *UserNicknameUpdateOne) AddNo(i int) *UserNicknameUpdateOne {
	unuo.mutation.AddNo(i)
	return unuo
}

// Mutation returns the UserNicknameMutation object of the builder.
func (unuo *UserNicknameUpdateOne) Mutation() *UserNicknameMutation {
	return unuo.mutation
}

// Where appends a list predicates to the UserNicknameUpdate builder.
func (unuo *UserNicknameUpdateOne) Where(ps ...predicate.UserNickname) *UserNicknameUpdateOne {
	unuo.mutation.Where(ps...)
	return unuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (unuo *UserNicknameUpdateOne) Select(field string, fields ...string) *UserNicknameUpdateOne {
	unuo.fields = append([]string{field}, fields...)
	return unuo
}

// Save executes the query and returns the updated UserNickname entity.
func (unuo *UserNicknameUpdateOne) Save(ctx context.Context) (*UserNickname, error) {
	if err := unuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, unuo.sqlSave, unuo.mutation, unuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (unuo *UserNicknameUpdateOne) SaveX(ctx context.Context) *UserNickname {
	node, err := unuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (unuo *UserNicknameUpdateOne) Exec(ctx context.Context) error {
	_, err := unuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (unuo *UserNicknameUpdateOne) ExecX(ctx context.Context) {
	if err := unuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (unuo *UserNicknameUpdateOne) defaults() error {
	if _, ok := unuo.mutation.UpdateTime(); !ok {
		if usernickname.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized usernickname.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := usernickname.UpdateDefaultUpdateTime()
		unuo.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (unuo *UserNicknameUpdateOne) check() error {
	if v, ok := unuo.mutation.Nickname(); ok {
		if err := usernickname.NicknameValidator(v); err != nil {
			return &ValidationError{Name: "nickname", err: fmt.Errorf(`ent: validator failed for field "UserNickname.nickname": %w`, err)}
		}
	}
	return nil
}

func (unuo *UserNicknameUpdateOne) sqlSave(ctx context.Context) (_node *UserNickname, err error) {
	if err := unuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(usernickname.Table, usernickname.Columns, sqlgraph.NewFieldSpec(usernickname.FieldID, field.TypeInt64))
	id, ok := unuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserNickname.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := unuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usernickname.FieldID)
		for _, f := range fields {
			if !usernickname.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usernickname.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := unuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := unuo.mutation.UpdateTime(); ok {
		_spec.SetField(usernickname.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := unuo.mutation.DeleteTime(); ok {
		_spec.SetField(usernickname.FieldDeleteTime, field.TypeTime, value)
	}
	if unuo.mutation.DeleteTimeCleared() {
		_spec.ClearField(usernickname.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := unuo.mutation.Nickname(); ok {
		_spec.SetField(usernickname.FieldNickname, field.TypeString, value)
	}
	if value, ok := unuo.mutation.No(); ok {
		_spec.SetField(usernickname.FieldNo, field.TypeInt, value)
	}
	if value, ok := unuo.mutation.AddedNo(); ok {
		_spec.AddField(usernickname.FieldNo, field.TypeInt, value)
	}
	_node = &UserNickname{config: unuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, unuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usernickname.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	unuo.mutation.done = true
	return _node, nil
}
