// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider                        = "node node_modules/prisma-nestjs-graphql"
  // for yarn monorepos
  // provider = "prisma-nestjs-graphql"
  output                          = "../src/@generated"
  graphqlScalars_BigInt_name      = "GraphQLBigInt"
  graphqlScalars_BigInt_specifier = "graphql-scalars"
  fields_Validator_from           = "class-validator"
  fields_Validator_input          = true
  noTypeId                        = true
  decorate_1_type                 = "Create@(One|Many)*Args"
  decorate_1_field                = data
  decorate_1_name                 = ValidateNested
  decorate_1_from                 = "class-validator"
  decorate_1_arguments            = "[]"

  requireSingleFieldsInWhereUniqueInput = true
  emitSingle                            = true
  emitCompiled                          = true
  purgeOutput                           = true
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserSessionState {
  ONLINE
  OFFLINE
}

enum UserType {
  USER
  SYSTEM
  ADMIN
}

/// 用户表
model User {
  /// @HideField({ match: 'UserWhereInput' })
  id            BigInt           @id @default(autoincrement())
  /// 用户名
  /// @Validator.MinLength(3, { message: 'INVAILD_USERNAME' })
  /// @HideField({ match: 'UserWhereInput' })
  username      String           @unique @db.VarChar(32)
  /// 昵称
  /// @Validator.MinLength(1, { message: 'INVAILD_USER_NICKNAME' })
  nickname      String           @db.VarChar(32)
  /// 昵称编号
  /// @HideField({ match: 'User@(Create|Update)*Input' })
  nicknameNo    Int
  /// 头像
  avatar        String?
  /// 在线状态
  /// @HideField({ input: true, output: false })
  sessionState  UserSessionState @default(OFFLINE)
  /// 密码
  /// @Validator.MinLength(6, { message: 'INVAILD_USER_PASSWORD' })
  /// @HideField({ match: 'UserWhereInput' })
  password      String
  /// 密码盐
  /// @HideField({ input: true, output: false })
  passwordSalt  String
  /// @HideField({ input: true, output: false })
  createdTime   DateTime         @default(now())
  /// @HideField({ input: true, output: false })
  updatedTime   DateTime         @updatedAt
  /// @HideField({ input: true, output: true })
  deletedTime   DateTime?
  /// 拥有的频道
  /// @HideField({ input: true, output: false })
  ownedChannels Channel[]        @relation("UserOwnedChannels")
  /// 加入的频道
  /// @HideField({ input: true, output: false })
  channels      ChannelToUser[]
  /// 用户类型
  type          UserType         @default(USER)
  /// 未读私信
  unreadMessage Int              @default(0)
  /// 个人介绍
  intro         String           @default("")
  /// 资料横幅
  profileBanner String?

  fromChats     Chat[]          @relation("fromUserChats")
  targetChats   Chat[]          @relation("targetUserChats")
  friendsA      UserFriend[]    @relation("UserFriendA")
  friendsB      UserFriend[]    @relation("UserFriendB")
  ChannelInvite ChannelInvite[]
}

model UserFriend {
  /// @HideField({ match: 'UserWhereInput' })
  id          BigInt   @id @default(autoincrement())
  /// @HideField({ input: true, output: false })
  createdTime DateTime @default(now())
  /// @HideField({ input: true, output: false })
  updatedTime DateTime @updatedAt

  userA       User    @relation("UserFriendA", fields: [userAId], references: [id])
  userAId     BigInt
  /// 用户A是否同意
  userAAccept Boolean @default(false)
  /// 用户A未读消息
  userAUnread Int     @default(0)

  userB       User    @relation("UserFriendB", fields: [userBId], references: [id])
  userBId     BigInt
  /// 用户B是否同意
  userBAccept Boolean @default(false)
  /// 用户B未读消息
  userBUnread Int     @default(0)

  /// 最后聊天时间
  lastChatTime DateTime @default(now())

  @@unique([userAId, userBId])
}

/// 用户昵称表
model UserNickname {
  id          BigInt    @id @default(autoincrement())
  /// 昵称
  nickname    String    @unique @db.VarChar(32)
  /// 昵称编号
  no          Int
  /// @HideField({ input: true, output: false })
  createdTime DateTime  @default(now())
  /// @HideField({ input: true, output: false })
  updatedTime DateTime  @updatedAt
  /// @HideField({ input: true, output: true })
  deletedTime DateTime?
}

model Channel {
  id          BigInt            @id @default(autoincrement())
  /// 频道代号
  code        String            @unique @default(cuid()) @db.VarChar(32)
  /// 频道名
  name        String            @db.VarChar(32)
  /// 头像
  avatar      String?
  /// 拥有者
  /// @HideField({ match: 'Channel@(Create|Update)*Input' })
  ownerUser   User              @relation("UserOwnedChannels", fields: [ownerUserId], references: [id])
  /// 拥有者ID
  ownerUserId BigInt
  /// 频道用户
  /// @HideField({ match: 'Channel@(Create|Update)*Input' })
  users       ChannelToUser[]
  /// 房间
  /// @HideField({ input: true, output: false })
  rooms       Room[]
  /// 角色
  /// @HideField({ match: 'Channel@(Create|Update)*Input' })
  roles       ChannelRole[]
  /// 分组列表
  categories  ChannelCategory[]
  /// @HideField({ input: true, output: false })
  createdTime DateTime          @default(now())
  /// @HideField({ input: true, output: false })
  updatedTime DateTime          @updatedAt
  /// @HideField({ input: true, output: true })
  deletedTime DateTime?
  /// @HideField({ input: true, output: true })
  invites     ChannelInvite[]
}

model ChannelInvite {
  id          BigInt    @id @default(autoincrement())
  /// @HideField({ input: true, output: false })
  createdTime DateTime  @default(now())
  /// @HideField({ input: true, output: false })
  updatedTime DateTime  @updatedAt
  /// @HideField({ input: true, output: true })
  deletedTime DateTime?
  /// 邀请码
  code        String    @unique
  /// 有效期
  expireAt    DateTime?
  /// 频道
  channel     Channel   @relation(fields: [channelId], references: [id])
  channelId   BigInt
  /// 创建用户
  user        User      @relation(fields: [userId], references: [id])
  userId      BigInt
}

model ChannelCategory {
  id          BigInt    @id @default(autoincrement())
  /// 名称
  name        String
  /// 频道ID
  channelId   BigInt
  channel     Channel   @relation(fields: [channelId], references: [id])
  /// @HideField({ input: true, output: false })
  createdTime DateTime  @default(now())
  /// @HideField({ input: true, output: false })
  updatedTime DateTime  @updatedAt
  /// @HideField({ input: true, output: true })
  deletedTime DateTime?
  /// 房间列表
  rooms       Room[]
}

model ChannelRole {
  id           BigInt                  @id @default(autoincrement())
  channel      Channel                 @relation(fields: [channelId], references: [id])
  channelId    BigInt
  /// 角色名称
  name         String
  /// 颜色
  color        String?
  /// 权限列表
  permissions  ChannelRolePermission[]
  /// 默认角色
  defaultRole  Boolean                 @default(false)
  /// @HideField({ input: true, output: false })
  createdTime  DateTime                @default(now())
  /// @HideField({ input: true, output: false })
  updatedTime  DateTime                @updatedAt
  /// @HideField({ input: true, output: true })
  deletedTime  DateTime?
  channelUsers ChannelToUser[]
}

enum ChannelRolePermissionCode {
  ADMIN
  INVITE
  VOICE
  SEND_CHAT
}

model ChannelRolePermission {
  id          BigInt                    @id @default(autoincrement())
  /// @HideField({ input: true, output: false })
  createdTime DateTime                  @default(now())
  /// @HideField({ input: true, output: false })
  updatedTime DateTime                  @updatedAt
  /// 权限编码
  code        ChannelRolePermissionCode @unique
  /// 关联角色
  role        ChannelRole[]
}

model ChannelToUser {
  user          User        @relation(fields: [userId], references: [id])
  userId        BigInt
  channel       Channel     @relation(fields: [channelId], references: [id])
  channelId     BigInt
  channelRole   ChannelRole @relation(fields: [channelRoleId], references: [id])
  channelRoleId BigInt

  @@id([userId, channelId])
}

model Room {
  id                BigInt          @id @default(autoincrement())
  /// 频道ID
  channelId         BigInt
  /// 频道
  channel           Channel         @relation(fields: [channelId], references: [id])
  /// 频道分组ID
  channelCategoryId BigInt
  /// 频道分组
  channelCategory   ChannelCategory @relation(fields: [channelCategoryId], references: [id])
  /// 房间名
  name              String
  /// 最大成员数量
  maxMember         Int             @default(50)
  /// 房间排序
  sort              Int             @default(9999)
  /// @HideField({ input: true, output: false })
  createdTime       DateTime        @default(now())
  /// @HideField({ input: true, output: false })
  updatedTime       DateTime        @updatedAt
  /// @HideField({ input: true, output: true })
  deletedTime       DateTime?

  /// 房间对话
  chats Chat[]
}

enum ChatTarget {
  ROOM
  USER
}

enum ChatType {
  USER
  SYSTEM
}

enum ChatMessageType {
  TEXT
  IMAGE
}

/// 聊天表
model Chat {
  id           BigInt     @id @default(autoincrement())
  /// 对话目标
  target       ChatTarget
  /// 消息类型
  type         ChatType   @default(USER)
  /// 用户ID
  user         User?      @relation("fromUserChats", fields: [userId], references: [id])
  userId       BigInt?
  /// 房间
  room         Room?      @relation(fields: [roomId], references: [id])
  roomId       BigInt?
  /// 目标用户
  targetUser   User?      @relation("targetUserChats", fields: [targetUserId], references: [id])
  targetUserId BigInt?
  /// 消息内容
  message      Json
  /// 消息纯文本
  plainText    String     @default("")

  /// @HideField({ input: true, output: false })
  createdTime DateTime  @default(now())
  /// @HideField({ input: true, output: false })
  updatedTime DateTime  @updatedAt
  /// @HideField({ input: true, output: true })
  deletedTime DateTime?
}
